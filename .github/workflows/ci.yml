name: CI Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Prevent secret leakage to frontend
      run: |
        echo "üîç Scanning frontend directory for secret leakage..."
        
        # Check for API keys in frontend source files (excluding node_modules)
        if grep -R --exclude-dir=node_modules --exclude-dir=.git -E "CHUNKR_API_KEY|GEMINI_API_KEY" frontend/; then
          echo "‚ùå SECURITY VIOLATION: Secret-like tokens found in frontend!"
          echo "API keys must never be included in frontend code as they will be exposed to end users."
          echo "Please move these keys to backend/.env and access them server-side only."
          exit 1
        fi
        
        # Check for hardcoded API keys (patterns that look like keys) 
        if grep -R --exclude-dir=node_modules --exclude-dir=.git -E "(chunkr|gemini).*['\"][a-zA-Z0-9_-]{20,}['\"]" frontend/; then
          echo "‚ùå SECURITY VIOLATION: Potential hardcoded API keys found in frontend!"
          echo "API keys should only be stored in backend environment variables."
          exit 1
        fi
        
        # Check for environment variable patterns that might leak secrets
        if grep -R --exclude-dir=node_modules --exclude-dir=.git -E "process\.env\.(CHUNKR_API_KEY|GEMINI_API_KEY)" frontend/; then
          echo "‚ùå SECURITY VIOLATION: Backend environment variables accessed in frontend!"
          echo "These variables will be bundled and exposed to users."
          exit 1
        fi
        
        echo "‚úÖ No secret leakage detected in frontend"
        
    - name: Validate environment variable separation
      run: |
        echo "üîç Validating environment variable separation..."
        
        # Ensure backend keys are only in backend
        if [ -f "backend/.env" ]; then
          if grep -E "(CHUNKR_API_KEY|GEMINI_API_KEY)" backend/.env > /dev/null; then
            echo "‚úÖ Backend API keys found in backend/.env (correct location)"
          fi
        fi
        
        # Ensure frontend only has REACT_APP_ prefixed variables
        if [ -f "frontend/.env" ]; then
          if grep -v -E "^(REACT_APP_|#|^$)" frontend/.env | grep -E "(CHUNKR_API_KEY|GEMINI_API_KEY)"; then
            echo "‚ùå SECURITY VIOLATION: Backend secrets found in frontend/.env!"
            echo "Frontend .env should only contain REACT_APP_ prefixed variables."
            exit 1
          fi
          echo "‚úÖ Frontend .env contains only safe REACT_APP_ variables"
        fi
        
    - name: Check for hardcoded URLs and ports
      run: |
        echo "üîç Checking for hardcoded URLs and ports..."
        
        # Check for hardcoded localhost URLs in production code
        if grep -R --exclude-dir=node_modules --exclude-dir=.git -E "http://localhost:[0-9]+" frontend/src/ backend/ | grep -v -E "\.(test|spec)\.(js|py)$"; then
          echo "‚ö†Ô∏è  Warning: Hardcoded localhost URLs found. Consider using environment variables."
        fi
        
        echo "‚úÖ URL/port validation complete"
        
    - name: Scan for common secret patterns
      run: |
        echo "üîç Scanning for common secret patterns..."
        
        # Look for various secret patterns (excluding test files and node_modules)
        SECRET_PATTERNS=(
          "api[_-]?key['\"][[:space:]]*[:=][[:space:]]*['\"][a-zA-Z0-9_-]{20,}"
          "secret[_-]?key['\"][[:space:]]*[:=][[:space:]]*['\"][a-zA-Z0-9_-]{20,}"
          "password['\"][[:space:]]*[:=][[:space:]]*['\"][^'\"]{8,}"
          "token['\"][[:space:]]*[:=][[:space:]]*['\"][a-zA-Z0-9_-]{20,}"
        )
        
        VIOLATIONS_FOUND=false
        
        for pattern in "${SECRET_PATTERNS[@]}"; do
          if grep -R --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" -iE "$pattern" frontend/; then
            echo "‚ùå Potential secret pattern found: $pattern"
            VIOLATIONS_FOUND=true
          fi
        done
        
        if [ "$VIOLATIONS_FOUND" = true ]; then
          echo "‚ùå SECURITY VIOLATION: Potential secrets found in frontend code!"
          exit 1
        fi
        
        echo "‚úÖ No suspicious secret patterns detected"

  build-test:
    runs-on: ubuntu-latest
    needs: security-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/package.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        yarn install --frozen-lockfile
        
    - name: Install backend dependencies  
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Build frontend (security check)
      run: |
        cd frontend
        # Create a minimal .env for build (no secrets)
        echo "REACT_APP_BACKEND_URL=http://localhost:8001" > .env
        
        # Build and check for secrets in bundle
        yarn build
        
        # Scan build output for potential secrets
        if find build/ -name "*.js" -exec grep -l -E "(CHUNKR_API_KEY|GEMINI_API_KEY)" {} \; | head -1; then
          echo "‚ùå CRITICAL: Secrets found in production build!"
          exit 1
        fi
        
        echo "‚úÖ Production build is clean of secrets"
        
    - name: Backend security validation
      run: |
        cd backend
        # Check that secrets are only accessed via os.environ
        if grep -R --exclude-dir=__pycache__ -E "(CHUNKR_API_KEY|GEMINI_API_KEY)" . | grep -v "os.environ\|getenv"; then
          echo "‚ùå API keys should only be accessed via os.environ.get()"
          exit 1
        fi
        
        echo "‚úÖ Backend properly uses environment variables"