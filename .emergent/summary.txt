<analysis>
The previous AI engineer effectively bootstrapped and enhanced a full-stack mRNA vaccine knowledge base application using React, FastAPI, and MongoDB. The trajectory shows a systematic approach, starting with core features and iteratively adding complex functionalities. Key initial achievements included a robust UI with shadcn/ui, API endpoints for various content types, MongoDB seeding, and local AI summarization/Q&A.

Subsequent major efforts focused on improving resource management. This involved implementing server-side thumbnail generation for PDFs and videos (PyMuPDF, OpenCV/Pillow), integrating  for PDF ingestion, and Google Gemini (Vertex AI) for video summarization. The output of these AI services is stored as markdown files in a  directory, forming a new knowledge base. A dedicated frontend Knowledge page was built to browse and preview these markdown files, complete with frontmatter rendering, chunk anchors, and copy functionality.

The engineer also focused on operational robustness and user experience: hardening a periodic reconciliation script to decouple it from frontend environment variables, and implementing app-wide error boundaries and global error listeners to gracefully handle browser extension errors (e.g., MetaMask) that were causing UI crashes.

Most recently, the focus shifted to enhancing the  endpoint for better resilience. The engineer is in the process of refactoring this endpoint to always return a  status with a  and , enforce server-side size and MIME type limits, and provide a  endpoint for monitoring background processing. This transition to an asynchronous task model is crucial for handling long-running external AI integrations.
</analysis>

<product_requirements>
The overarching goal is to establish an authoritative online platform for comprehensive education on mRNA COVID vaccines, catering to patients, caregivers, medical professionals, and researchers. The site is designed to be a primary resource for understanding vaccine risks, mechanisms, and spike protein pathology.

**Implemented Features include:**
1.  **Main Pages:** Home (vertical feed), About, Shop (integrated with ShopRocket.io, including a fallback for CDN issues), Research Articles (dynamic feed with filters, sorting), Treatments (evidence-backed protocols), and Media (video-rich, Instagram-style feed).
2.  **Bioweapon Resources:** A system for managing folder-based content (), featuring auto-scanning, upload, inline editing, and deletion of files (PDFs, videos, audio) with associated . Thumbnail generation for PDFs (PyMuPDF) and videos (OpenCV/Pillow) has been added. PDFs are processed by  and videos by Google Gemini for content ingestion and summarization into markdown.
3.  **Dynamic Research Articles:** Displays articles with rich metadata, supporting filtering, sorting, and Read More. RSS sync for PubMed, medRxiv, bioRxiv is planned.
4.  **Treatments Page:** Protocols with mechanisms, dosages, study links, and Shop integration.
5.  **Media Page:** Embedded YouTube/Vimeo videos with filtering.
6.  **AI Features:** Local extractive summarization for research articles and a global Q&A grounded in site content.
7.  **Knowledge Base:** A new section on the frontend displays markdown files generated from Chunkr/Gemini processing, including rich rendering of frontmatter, chunk anchors, and copy-to-clipboard functionality.
8.  **Robustness:** Hardened reconciliation script, app-wide error handling for browser extensions, and ongoing work on an idempotent, asynchronous upload API with limits.
</product_requirements>

<key_technical_concepts>
-   **Full-stack:** React (frontend), FastAPI (backend), MongoDB (database).
-   **UI/UX:** shadcn/ui, Tailwind CSS, , modern design.
-   **Data Management:** UUIDs for IDs, timezone-aware datetimes.
-   **API Integrations:** ShopRocket.io,  for PDF, Google Gemini (Vertex AI) for video.
-   **File Processing:** PyMuPDF, OpenCV (headless), Pillow, .
-   **Content Rendering:** .
-   **Concurrency:** FastAPI BackgroundTasks.
-   **Error Handling:** React ErrorBoundary, global error listeners.
-   **Deployment:** Kubernetes ingress ( prefix), environment variables, supervisor.
</key_technical_concepts>

<code_architecture>


-   
    -   **Importance:** Provides a template for environment variables used across the application, especially for backend secrets and URLs.
    -   **Changes Made:** Created to centralize , ,  and ensure scripts are decoupled from frontend .
-   
    -   **Importance:** The central FastAPI backend, handling all API endpoints, database interactions, and business logic.
    -   **Changes Made:**
        -   Extensive updates for thumbnail generation (, , ).
        -   Integrated  and  functions using FastAPI  for asynchronous content processing.
        -   Added logic to update  directly with  upon background task completion for deterministic matching.
        -   Implemented  to list processed markdown files and  for manual reconciliation.
        -   Refactoring  to be an asynchronous task endpoint, returning  with  and , enforcing size/MIME limits, and streaming uploads to disk.
-   
    -   **Importance:** Main React component for routing, layout, and rendering.
    -   **Changes Made:**
        -   Integrated  for new  route.
        -   Added a Knowledge navigation link in the header.
        -   Wrapped all routes with  to catch and ignore browser extension errors.
        -   Restored definitions for page components (Home, Research, etc.) to fix runtime errors.
-   
    -   **Importance:** New React component to display and preview generated markdown knowledge files.
    -   **Changes Made:** Created to fetch and render markdown from  using . Includes client-side frontmatter parsing for a styled header, chunk anchors for navigation, and copy buttons for summary and citation.
-   
    -   **Importance:** Catches JavaScript errors in its child component tree, preventing UI crashes.
    -   **Changes Made:** Created to specifically handle and ignore known errors from browser extensions (e.g., MetaMask) while providing a fallback UI for genuine app errors.
-   
    -   **Importance:** Stores metadata for resources, dynamically updated by uploads and AI processing.
    -   **Changes Made:** Extended  schema to include , , , .
-   
    -   **Importance:** New directory for storing generated PDF and video thumbnails.
-   
    -   **Importance:** New directory for storing markdown files generated by Chunkr.ai and Gemini.
-   
    -   **Importance:** Manages Python dependencies.
    -   **Changes Made:** Added usage: pymupdf [-h]
               {show,clean,join,extract,embed-info,embed-add,embed-del,embed-upd,embed-extract,embed-copy,gettext,internal}
               ...

------------------------- Basic PyMuPDF Functions -------------------------

options:
  -h, --help            show this help message and exit

Subcommands:
  {show,clean,join,extract,embed-info,embed-add,embed-del,embed-upd,embed-extract,embed-copy,gettext,internal}
                        Enter 'command -h' for subcommand specific help, , , , , , .
-   
    -   **Importance:** Manages Node.js/React dependencies.
    -   **Changes Made:** Added  (and potentially  for warnings).
-   
    -   **Importance:** Shell script for periodic reconciliation of knowledge files.
    -   **Changes Made:** Rewritten for robustness: reads  from repo root  (not frontend's), uses  with retries, and explicit error handling.
-   
    -   **Importance:** Project documentation.
    -   **Changes Made:** Updated with Operations and Environment Setup sections, detailing the new reconcile script usage, knowledge generation flow, and API key management.
-   
    -   **Importance:** Frontend entry point.
    -   **Changes Made:** Added global  and  listeners to suppress known browser extension errors.
</code_architecture>

<pending_tasks>
-   Implement drag-and-drop uploader for multiple files (bulk import).
-   Add resource tagging rules (auto-tag based on filename patterns).
-   Implement scheduled Research RSS sync with New badges.
-   Upgrade local AI features to use external LLM with .
-   Enrich Media page with  poster images and durations.
-   Future: Newsletter, Community Forum, Interactive Timeline, PWA.
-   Implement  for streaming markdown in Ask dialog and Research summaries for better UX.
</pending_tasks>

<current_work>
The application currently provides an authoritative platform for mRNA vaccine education with all main pages (Home, Research, Shop, Resources, Treatments, Media) functional. The most recent focus has been on enhancing the Resources section and overall application robustness.

**Key implementations include:**
-   **Thumbnail Generation:** Server-side generation of 480x270 JPEG thumbnails for uploaded PDF (via PyMuPDF) and video (via OpenCV/Pillow) files. Thumbnails are saved to  and displayed on resource cards.
-   **Knowledge Generation Pipeline:** On file upload in the Resources section:
    -   PDFs are automatically ingested by  (using ).
    -   Videos are summarized by Google Gemini (Vertex AI, using ).
    -   Both processes run asynchronously as FastAPI .
    -   The generated structured markdown files are saved to .
-   **Knowledge UI:**
    -   A new Knowledge page () lists these markdown files.
    -   The preview functionality () renders the markdown, including a styled header parsed from YAML frontmatter (title, date, type, tags, summary).
    -   The preview also features chunk anchors for quick navigation within the document and Copy Summary and Copy Citation buttons.
    -   Resource cards dynamically show an Open Knowledge button when  is available or a Processing: chunkr_pdf/gemini_video badge during background ingestion.
-   **Reconciliation:**
    -    is deterministically updated with  as soon as background tasks complete.
    -   A manual reconciliation endpoint () and automatic reconciliation on  ensure s are consistently set.
    -   A robust, cron-friendly shell script () has been added for periodic reconciliation.
-   **Error Handling & Robustness:**
    -   An  component has been implemented and wrapped around all React routes to catch and gracefully handle UI errors, specifically ignoring common issues from browser extensions (like MetaMask) to prevent app crashes.
    -   Global  and  listeners in  further suppress noisy extension-related console messages.
-   **Upload API Refactoring (In Progress):** The  endpoint is being refactored to:
    -   Always return  status with a  and .
    -   Enforce server-side limits: max 100 MB file size and specific MIME types (PDF, MP4, QuickTime, WebM).
    -   Provide a  endpoint for checking the status of background ingestion tasks.

The system is stable, with all existing functionalities verified, and the focus is on completing the robust upload mechanism.
</current_work>

<optional_next_step>
Complete the refactoring of the  endpoint to ensure it always returns  with  and , enforces limits, and test the new  endpoint.
</optional_next_step>
